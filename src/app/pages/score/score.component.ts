import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CibilService } from '../../services/cibil.service'; // Import the service for API calls
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-cibil-score',
  templateUrl: './score.component.html',
  styleUrls: ['./score.component.css'],
})
export class ScoreComponent {
  userForm: FormGroup;
  bankNames = [
    "State Bank of India", "Union Bank of India", "Bank of India", "Indian Bank",
    "Central Bank of India", "Bank of Baroda", "Canara Bank", "Punjab National Bank",
    "Indian Overseas Bank", "Syndicate Bank", "Andhra Bank", "Corporation Bank",
    "ICICI Bank", "HDFC Bank", "Axis Bank", "Kotak Mahindra Bank", "Yes Bank",
    "IndusInd Bank", "Federal Bank", "IDFC First Bank", "RBL Bank", "South Indian Bank"
  ];

  step: number = 1;
  showResultBox: boolean = false;
  Score: number = 0;
  Status: string = '';
  showPersonalInfo: boolean = false;
  otp: string = '';  // To store OTP entered by the user
  generatedOtp: string = '';  // To store OTP generated by backend
  userId: number = 1; // Assume user ID is 1 for now (to be retrieved dynamically after login)

  constructor(private fb: FormBuilder, private cibilService: CibilService, private toastr:ToastrService) {
    this.userForm = this.fb.group({
      bankName: ['', Validators.required],
      accountNumber: [
        '', [Validators.required, Validators.minLength(12), Validators.maxLength(12)]
      ],
      mobileNumber: [
        '', [Validators.required, Validators.minLength(10), Validators.maxLength(10)]
      ],
      otp: ['', Validators.required] // Added for OTP verification
    });
  }

  // Function to initiate OTP request and fetch CIBIL details
  async fetchDetails() {
    try {
      await this.verifyOtp();  // Verify OTP entered by the user
      this.generateRandomScore(); // Generate CIBIL score if OTP is valid
      this.showResultBox = true;
      this.saveCibilScore();  // Save the CIBIL score to backend
    } catch (error) {
      this.toastr.warning('OTP verification failed. Please try again.');
    }
  }

  // Verify OTP entered by the user
  verifyOtp(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.otp === this.generatedOtp) {
        resolve();
      } else {
        reject();
      }
    });
  }

  // Generate random CIBIL score and determine status
  generateRandomScore() {
    const randomScore = Math.floor(Math.random() * (900 - 300 + 1)) + 300;
    this.Score = randomScore;

    if (randomScore < 550) {
      this.Status = 'Bad';
    } else if (randomScore < 650) {
      this.Status = 'Poor';
    } else if (randomScore < 700) {
      this.Status = 'Fair';
    } else if (randomScore < 750) {
      this.Status = 'Good';
    } else {
      this.Status = 'Excellent';
    }
  }

  // Function to request OTP and fetch the CIBIL score details
  getCibilScore() {
    this.showPersonalInfo = true;
    this.showResultBox = false;
    this.step = 1;

    // Request to send OTP to the mobile number
    this.cibilService.sendOtp(this.userForm.value.mobileNumber).subscribe(
      (response: any) => {
        this.generatedOtp = response.otp;  // Assuming OTP is returned from backend
        console.log('OTP sent:', this.generatedOtp);
      },
      (error) => {
        this.toastr.warning('Error in sending OTP. Please try again.');
      }
    );
  }

  // Save the CIBIL score for the user
  saveCibilScore() {
    this.cibilService.saveCibilScore(this.userId, this.Score, this.Status).subscribe(
      (response: any) => {
        console.log('CIBIL score saved successfully:', response);
      },
      (error) => {
        console.error('Error saving CIBIL score:', error);
      }
    );
  }

  // Go to the next step after filling out the form
  nextStep() {
    if (this.userForm.valid) {
      this.step = 2; // Move to OTP step
    } else {
      this.toastr.info('Please fill out all fields correctly.');
    }
  }

  // Fetch the CIBIL score on the user dashboard
  fetchUserCibilScore() {
    this.cibilService.getUserCibilScore(this.userId).subscribe(
      (response: { score: number; status: string; }) => {
        if (response) {
          this.Score = response.score;
          this.Status = response.status;
        } else {
          console.log('No CIBIL score found for the user.');
        }
      },
      (error) => {
        console.error('Error fetching CIBIL score:', error);
      }
    );
  }
}
